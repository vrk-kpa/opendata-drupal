name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ${{ github.ref }}/build
      cancel-in-progress: true
    permissions:
      id-token: write
      contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: configure NPM credentials
        run: |
          cat <<EOT >> ./.npmrc
          @fortawesome:registry=https://npm.fontawesome.com/
          //npm.fontawesome.com/:_authToken=$NPM_TOKEN
          EOT
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: configure AWS credentials
        id: login-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: github-actions
          aws-region: eu-west-1

      - name: login to AWS ECR
        id: login-ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.login-aws.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com

      - name: login to DynaTrace Registry
        id: login-dtr
        uses: docker/login-action@v2 
        with:
          registry: ${{ secrets.DYNATRACE_USERNAME }}.live.dynatrace.com
          username: ${{ secrets.DYNATRACE_USERNAME }}
          password: ${{ secrets.DYNATRACE_TOKEN }}

      - name: build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-aws.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/opendata/drupal:${{ github.sha }}
            ${{ steps.login-aws.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/opendata/drupal:latest
          secret-files: |
            npmrc=./.npmrc
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: build and push docker image (dynatrace)
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-aws.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/opendata/drupal:${{ github.sha }}-dynatrace
            ${{ steps.login-aws.outputs.aws-account-id }}.dkr.ecr.eu-west-1.amazonaws.com/opendata/drupal:latest-dynatrace
          build-args: |
            DYNATRACE_ENABLED=1
          secret-files: |
            npmrc=./.npmrc
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    concurrency:
      group: ${{ github.ref }}/release
    needs:
      - build
    permissions:
      id-token: write
      contents: write
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: github-actions
          aws-region: eu-west-1

      - name: semantic release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 18
          branch: master
          dry_run: false
          extra_plugins: |
            @semantic-release/changelog@6.0.1
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # NOTE: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-retag.html
      - name: tag release
        if: always() && steps.semantic.outputs.new_release_published == 'true'
        run: |
          # normal image
          MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPO --image-ids imageTag=$GIT_SHA --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name $ECR_REPO --image-tag $GIT_TAG --image-manifest "$MANIFEST"
          # dynatrace enabled image
          MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPO --image-ids imageTag=$GIT_SHA_DYNATRACE --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name $ECR_REPO --image-tag $GIT_TAG_DYNATRACE --image-manifest "$MANIFEST"
        env:
          ECR_REPO: opendata/drupal
          GIT_SHA: ${{ github.sha }}
          GIT_SHA_DYNATRACE: ${{ github.sha }}-dynatrace
          GIT_TAG: v${{ steps.semantic.outputs.new_release_version }}
          GIT_TAG_DYNATRACE: v${{ steps.semantic.outputs.new_release_version }}-dynatrace
